@page "/"
@inject IJSRuntime JS

<PageTitle>Todo List</PageTitle>

<h1>Todo List</h1>

<input @bind="newTodoTitle" placeholder="Add a new todo" />
<button @onclick="AddTodo">Add</button>

@if (todos.Count == 0)
{
    <p>No items to display.</p>
}
else
{
    <ul>
        @foreach (var todo in todos)
        {
            <li>
                <input type="checkbox" @bind="todo.IsCompleted" />
                <input @bind="todo.Title" />
                <button @onclick="() => DeleteTodo(todo.Id)">Delete</button>
            </li>
        }
    </ul>
}

@code {
    private List<TodoItem> todos = new List<TodoItem>();
    private string newTodoTitle;
    private bool isFirstRenderCompleted = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the todos only after the first render is complete
            todos = await JS.InvokeAsync<List<TodoItem>>("loadTodos");
            isFirstRenderCompleted = true;
            StateHasChanged(); // Re-render the component after loading data
        }
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle))
        {
            var newTodo = new TodoItem
                {
                    Id = todos.Count > 0 ? todos.Max(x => x.Id) + 1 : 1,
                    Title = newTodoTitle,
                    IsCompleted = false
                };
            todos.Add(newTodo);
            await JS.InvokeVoidAsync("saveTodo", newTodo);
            newTodoTitle = string.Empty;
        }
    }

    private async Task UpdateTodo()
    {
        // You can customize this method to update individual todo items
        await JS.InvokeVoidAsync("updateTodo", todos);
    }

    private async Task DeleteTodo(int id)
    {
        var todo = todos.FirstOrDefault(x => x.Id == id);
        if (todo != null)
        {
            todos.Remove(todo);
            await JS.InvokeVoidAsync("deleteTodo", id);
        }
    }
}
